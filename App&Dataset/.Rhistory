df$Department <- as.integer(as.factor(df$Department))
df$EducationField <- as.integer(as.factor(df$EducationField))
df$Gender <- as.integer(as.factor(df$Gender))
df$JobRole <- as.integer(as.factor(df$JobRole))
df$MaritalStatus <- as.integer(as.factor(df$MaritalStatus))
df$OverTime <- as.integer(as.factor(df$OverTime))
df <- as.data.frame(df %>% count(JobRole, Attrition))
df_percent <- as.data.frame(df %>% group_by(JobRole) %>%
mutate(Percentage = paste0(round(n/sum(n)*100, 2))))
df_percent$Percentage <- as.numeric(df_percent$Percentage)
df_percent <- df_percent %>% filter(Attrition == "Left")
# Update inputs (you could create an observer with both updateSel...)
# You can also constraint your choices. If you wanted select only numeric
# variables you could set "choices = sapply(df, is.numeric)"
# It depends on what do you want to do later on.
updateSelectInput(session, inputId = 'xcol', label = 'X Variable',
choices = c("Attrition" = "Attrition",
"Generations" = "Generations",
"JobRole" = "JobRole"), selected = names(df))
updateSelectInput(session, inputId = 'ycol', label = 'Y Variable',
choices = c("Attrition" = "Attrition",
"Generations" = "Generations",
"JobRole" = "JobRole"), selected = names(df))
return(df_percent)
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# not included in the print out
library(tidyverse)
library(janitor)
library(readxl)
library(GGally)
library(ggplot2)
library(treemapify)
library(gridExtra)
library(grid)
library(scales)
library(ggcorrplot)
library(corrplot)
library(class)
library(caret)
library(pROC)
library(e1071)
library(kableExtra)
library(StepReg)
library(ggthemes)
library(olsrr)
library(stargazer)
library(car)
library(leaps)
# READ IN DATA
data <- as.data.frame(read.csv("C:/Users/Joey/Desktop/project2/CaseStudy2-data.csv"))
vizdata <- as.data.frame(read.csv("C:/Users/Joey/Desktop/project2/CaseStudy2-data.csv"))
employee <- read.csv("C:/Users/Joey/Desktop/project2/CaseStudy2-data.csv", stringsAsFactors = T)
# CREATING INTUITIVE TITLE FOR VIZ OF DATA
vizdata$Attrition <- ifelse(vizdata$Attrition == "Yes", "Left", "Stayed")
data$EducationLevel <- ifelse(data$Education == 1, "No College",
ifelse(data$Education == 2, "Some College",
ifelse(data$Education == 3, "Bachelors",
ifelse(data$Education == 4, "Masters", "Phd"))))
vizdata$EducationLevel <- ifelse(data$Education == 1, "No College",
ifelse(data$Education == 2, "Some College",
ifelse(data$Education == 3, "Bachelors",
ifelse(data$Education == 4, "Masters", "Phd"))))
# Breaking Age into Generational Groups
data$Generations <- ifelse(data$Age > 26 & data$Age < 42, "Millennials",
ifelse(data$Age <= 26, "Gen Z",
ifelse(data$Age >= 42 & data$Age <57, "Gen X",
ifelse(data$Age >=57 & data$Age <= 67, "Boomers II",
ifelse(data$Age >= 68, "Boomers I", 'Silent')))))
# Breaking Age into Generational Groups - VIZ DATA
vizdata$Generations <- ifelse(data$Age > 26 & data$Age < 42, "Millennials",
ifelse(data$Age <= 26, "Gen Z",
ifelse(data$Age >= 42 & data$Age <57, "Gen X",
ifelse(data$Age >=57 & data$Age <= 67, "Boomers II",
ifelse(data$Age >= 68, "Boomers I", 'Silent')))))
# not included in the print out
library(tidyverse)
library(janitor)
library(readxl)
library(GGally)
library(ggplot2)
library(treemapify)
library(gridExtra)
library(grid)
library(scales)
library(ggcorrplot)
library(corrplot)
library(class)
library(caret)
library(pROC)
library(e1071)
library(kableExtra)
library(StepReg)
library(ggthemes)
library(olsrr)
library(stargazer)
library(car)
library(leaps)
# READ IN DATA
data <- as.data.frame(read.csv("C:/Users/Joey/Desktop/project2/CaseStudy2-data.csv"))
vizdata <- as.data.frame(read.csv("C:/Users/Joey/Desktop/project2/CaseStudy2-data.csv"))
employee <- read.csv("C:/Users/Joey/Desktop/project2/CaseStudy2-data.csv", stringsAsFactors = T)
# glimpse(data)
# get_dupes(data)
# missing <- sapply(data, function(x) sum(is.na(x)))
# sum(missing)
# summary(data)
#### Plotting Continuous Var Dist. of Data ####
cont_var <- vizdata %>% select(Attrition, Age, DistanceFromHome,
NumCompaniesWorked, PercentSalaryHike,TotalWorkingYears,
TrainingTimesLastYear,YearsAtCompany, YearsInCurrentRole,
YearsSinceLastPromotion,YearsWithCurrManager)
for (j in names(cont_var)) {
plot_var_name <- str_c(c("ggplot",j), collapse ="_")
print(plot_var_name)
temp_plot <- ggplot(cont_var, aes_string(j,fill = 'Attrition')) +
geom_bar(aes(y = ..count../sum(..count..)), position = "dodge", show.legend = FALSE)+
scale_y_continuous(labels = percent_format()) +
ylab("% of Attrition")
assign(plot_var_name, temp_plot)
}
my_plots_list <- lapply(names(cont_var), function(j) {
ggplot(cont_var, aes_string(j,fill = "Attrition")) +
geom_bar(aes(y = ..count../sum(..count..)), position = "dodge", show.legend = FALSE) +
scale_y_continuous(labels = percent_format()) +
ylab("% of Attrition") +
scale_color_fivethirtyeight("Attrition") +
theme_hc()
})
my_plots_list[[1]] = NULL # to get rid of Attrition / Attrition Plot
gridExtra::grid.arrange(grobs= my_plots_list, ncol = 4)
#### Plotting Categorical Var Dist. of Data ####
cat_var <- vizdata %>% select(Attrition, JobSatisfaction, JobLevel, JobInvolvement,
StockOptionLevel, BusinessTravel, JobRole, EducationField,
Gender, MaritalStatus, Department,OverTime,
Education, RelationshipSatisfaction, WorkLifeBalance)
for (j in names(cat_var)) {
plot_var_name <- str_c(c("ggplot",j), collapse ="_")
print(plot_var_name)
temp_plot <- ggplot(cat_var, aes_string(j,fill = 'Attrition')) +
geom_bar(aes(y = ..count../sum(..count..)), position = "dodge", show.legend = F)+
scale_y_continuous(labels = percent_format()) +
ylab("% of Attrition")
assign(plot_var_name, temp_plot)
}
my_plots_cat <- lapply(names(cat_var), function(j) {
ggplot(cat_var, aes_string(j,fill = "Attrition"))+
geom_bar(aes(y = ..count../sum(..count..)), color = "black", position = "dodge", show.legend = F)+
scale_y_continuous(labels = percent_format()) +
ylab("% of Attrition") +
scale_color_fivethirtyeight("Attrition") +
theme_hc()
})
my_plots_cat[[1]] = NULL # to get rid of Attrition / Attrition Plot
gridExtra::grid.arrange(grobs= my_plots_cat, ncol = 4)
# CREATING INTUITIVE TITLE FOR VIZ OF DATA
vizdata$Attrition <- ifelse(vizdata$Attrition == "Yes", "Left", "Stayed")
data$EducationLevel <- ifelse(data$Education == 1, "No College",
ifelse(data$Education == 2, "Some College",
ifelse(data$Education == 3, "Bachelors",
ifelse(data$Education == 4, "Masters", "Phd"))))
vizdata$EducationLevel <- ifelse(data$Education == 1, "No College",
ifelse(data$Education == 2, "Some College",
ifelse(data$Education == 3, "Bachelors",
ifelse(data$Education == 4, "Masters", "Phd"))))
# Breaking Age into Generational Groups
data$Generations <- ifelse(data$Age > 26 & data$Age < 42, "Millennials",
ifelse(data$Age <= 26, "Gen Z",
ifelse(data$Age >= 42 & data$Age <57, "Gen X",
ifelse(data$Age >=57 & data$Age <= 67, "Boomers II",
ifelse(data$Age >= 68, "Boomers I", 'Silent')))))
# Breaking Age into Generational Groups - VIZ DATA
vizdata$Generations <- ifelse(data$Age > 26 & data$Age < 42, "Millennials",
ifelse(data$Age <= 26, "Gen Z",
ifelse(data$Age >= 42 & data$Age <57, "Gen X",
ifelse(data$Age >=57 & data$Age <= 67, "Boomers II",
ifelse(data$Age >= 68, "Boomers I", 'Silent')))))
# plot for income corr based on 10 ranks
income_corr <- cor(rdata %>% select(MonthlyIncome, JobLevel,TotalWorkingYears,
JobManager,JobResearchDirector,YearsAtCompany,
Age,GenX,WorkMore30,YearsInCurrentRole,YearsWithCurrManager))
# not included in the print out
library(tidyverse)
library(janitor)
library(readxl)
library(GGally)
library(ggplot2)
library(treemapify)
library(gridExtra)
library(grid)
library(scales)
library(ggcorrplot)
library(corrplot)
library(class)
library(caret)
library(pROC)
library(e1071)
library(kableExtra)
library(StepReg)
library(ggthemes)
library(olsrr)
library(stargazer)
library(car)
library(leaps)
# READ IN DATA
data <- as.data.frame(read.csv("C:/Users/Joey/Desktop/project2/CaseStudy2-data.csv"))
vizdata <- as.data.frame(read.csv("C:/Users/Joey/Desktop/project2/CaseStudy2-data.csv"))
employee <- read.csv("C:/Users/Joey/Desktop/project2/CaseStudy2-data.csv", stringsAsFactors = T)
# glimpse(data)
# get_dupes(data)
# missing <- sapply(data, function(x) sum(is.na(x)))
# sum(missing)
# summary(data)
#### Plotting Continuous Var Dist. of Data ####
cont_var <- vizdata %>% select(Attrition, Age, DistanceFromHome,
NumCompaniesWorked, PercentSalaryHike,TotalWorkingYears,
TrainingTimesLastYear,YearsAtCompany, YearsInCurrentRole,
YearsSinceLastPromotion,YearsWithCurrManager)
for (j in names(cont_var)) {
plot_var_name <- str_c(c("ggplot",j), collapse ="_")
print(plot_var_name)
temp_plot <- ggplot(cont_var, aes_string(j,fill = 'Attrition')) +
geom_bar(aes(y = ..count../sum(..count..)), position = "dodge", show.legend = FALSE)+
scale_y_continuous(labels = percent_format()) +
ylab("% of Attrition")
assign(plot_var_name, temp_plot)
}
my_plots_list <- lapply(names(cont_var), function(j) {
ggplot(cont_var, aes_string(j,fill = "Attrition")) +
geom_bar(aes(y = ..count../sum(..count..)), position = "dodge", show.legend = FALSE) +
scale_y_continuous(labels = percent_format()) +
ylab("% of Attrition") +
scale_color_fivethirtyeight("Attrition") +
theme_hc()
})
my_plots_list[[1]] = NULL # to get rid of Attrition / Attrition Plot
gridExtra::grid.arrange(grobs= my_plots_list, ncol = 4)
#### Plotting Categorical Var Dist. of Data ####
cat_var <- vizdata %>% select(Attrition, JobSatisfaction, JobLevel, JobInvolvement,
StockOptionLevel, BusinessTravel, JobRole, EducationField,
Gender, MaritalStatus, Department,OverTime,
Education, RelationshipSatisfaction, WorkLifeBalance)
for (j in names(cat_var)) {
plot_var_name <- str_c(c("ggplot",j), collapse ="_")
print(plot_var_name)
temp_plot <- ggplot(cat_var, aes_string(j,fill = 'Attrition')) +
geom_bar(aes(y = ..count../sum(..count..)), position = "dodge", show.legend = F)+
scale_y_continuous(labels = percent_format()) +
ylab("% of Attrition")
assign(plot_var_name, temp_plot)
}
my_plots_cat <- lapply(names(cat_var), function(j) {
ggplot(cat_var, aes_string(j,fill = "Attrition"))+
geom_bar(aes(y = ..count../sum(..count..)), color = "black", position = "dodge", show.legend = F)+
scale_y_continuous(labels = percent_format()) +
ylab("% of Attrition") +
scale_color_fivethirtyeight("Attrition") +
theme_hc()
})
my_plots_cat[[1]] = NULL # to get rid of Attrition / Attrition Plot
gridExtra::grid.arrange(grobs= my_plots_cat, ncol = 4)
# CREATING INTUITIVE TITLE FOR VIZ OF DATA
vizdata$Attrition <- ifelse(vizdata$Attrition == "Yes", "Left", "Stayed")
data$EducationLevel <- ifelse(data$Education == 1, "No College",
ifelse(data$Education == 2, "Some College",
ifelse(data$Education == 3, "Bachelors",
ifelse(data$Education == 4, "Masters", "Phd"))))
vizdata$EducationLevel <- ifelse(data$Education == 1, "No College",
ifelse(data$Education == 2, "Some College",
ifelse(data$Education == 3, "Bachelors",
ifelse(data$Education == 4, "Masters", "Phd"))))
# Breaking Age into Generational Groups
data$Generations <- ifelse(data$Age > 26 & data$Age < 42, "Millennials",
ifelse(data$Age <= 26, "Gen Z",
ifelse(data$Age >= 42 & data$Age <57, "Gen X",
ifelse(data$Age >=57 & data$Age <= 67, "Boomers II",
ifelse(data$Age >= 68, "Boomers I", 'Silent')))))
# Breaking Age into Generational Groups - VIZ DATA
vizdata$Generations <- ifelse(data$Age > 26 & data$Age < 42, "Millennials",
ifelse(data$Age <= 26, "Gen Z",
ifelse(data$Age >= 42 & data$Age <57, "Gen X",
ifelse(data$Age >=57 & data$Age <= 67, "Boomers II",
ifelse(data$Age >= 68, "Boomers I", 'Silent')))))
# CAT CODING BELOW:
data$Attrition <- ifelse(data$Attrition == "Yes",1,0)
data$OverTime <- ifelse(data$OverTime == "Yes",1,0)
data$Gender <- ifelse(data$Gender == "Male",1,0)
data$BusinessTravel <- as.numeric(factor(data$BusinessTravel,
levels=c("Non-Travel", "Travel_Rarely", "Travel_Frequently"))) -1
data$HumanResources <- ifelse(data$Department == "Human Resources",1,0)
data$ResearchDevelopment <- ifelse(data$Department == "Research & Development",1,0)
data$Sales <- ifelse(data$Department == "Sales",1,0)
data$Single <- ifelse(data$MaritalStatus == "Single",1,0)
data$Married <- ifelse(data$MaritalStatus == "Married",1,0)
data$Divorced <- ifelse(data$MaritalStatus == "Divorced",1,0)
data$EduHumanResources <- ifelse(data$EducationField == "Human Resources",1,0)
data$EduLifeSciences <- ifelse(data$EducationField == "Life Sciences",1,0)
data$EduMedical <- ifelse(data$EducationField == "Medical",1,0)
data$EduMarketing <- ifelse(data$EducationField == "Marketing",1,0)
data$EduTechnicalDegree <- ifelse(data$EducationField == "Technical Degree",1,0)
data$EduOther <- ifelse(data$EducationField == "Other",1,0)
data$JobSalesExecutive <- ifelse(data$JobRole == "Sales Executive",1,0)
data$JobResearchDirector <- ifelse(data$JobRole == "Research Director",1,0)
data$JobManufacturingDirector <- ifelse(data$JobRole == "Manufacturing Director",1,0)
data$JobResearchScientist <- ifelse(data$JobRole == "Research Scientist",1,0)
data$JobSalesExecutive <- ifelse(data$JobRole == "Sales Executive",1,0)
data$JobSalesRepresentative <- ifelse(data$JobRole == "Sales Representative",1,0)
data$JobManager <- ifelse(data$JobRole == "Manager",1,0)
data$JobHealthcareRepresentative <- ifelse(data$JobRole == "Healthcare Representative",1,0)
data$JobHumanResources <- ifelse(data$JobRole == "Human Resources",1,0)
data$JobLaboratoryTechnician <- ifelse(data$JobRole == "Laboratory Technician",1,0)
data$Bachelors <- ifelse(data$EducationLevel == 'Bachelors', 1, 0)
data$Masters <- ifelse(data$EducationLevel == "Masters", 1, 0)
data$SomeCollege <- ifelse(data$EducationLevel == "Some College", 1, 0)
data$NoCollege <- ifelse(data$EducationLevel == "No College", 1, 0)
data$Phd <- ifelse(data$EducationLevel == "Phd", 1, 0)
data$Millennials <- ifelse(data$Generations == "Millennials", 1, 0)
data$GenZ <- ifelse(data$Generations == "Gen Z", 1, 0)
data$GenX <- ifelse(data$Generations == "Gen X", 1, 0)
data$Boomersii <- ifelse(data$Generations == "Boomers II", 1, 0)
# NUMERICAL ENCODING BELOW:
data$LessThan4k <- ifelse(data$MonthlyIncome < 4000, 1, 0)
data$FreshWorker <- ifelse(data$NumCompaniesWorked <=1.25, 1, 0)
data$LowLevel <- ifelse(data$JobLevel == 1, 1, 0)
data$FreshHire <- ifelse(data$YearsAtCompany <=4, 1, 0)
data$WorkMore30 <- ifelse(data$TotalWorkingYears >=30, 1, 0)
data$LowInvolve <- ifelse(data$JobInvolvement <2, 1, 0)
data$NewRole <- ifelse(data$YearsInCurrentRole <=2, 1, 0)
data$NoBalance <- ifelse(data$WorkLifeBalance <2, 1, 0)
data$SalaryHike <- ifelse(data$PercentSalaryHike  >17, 1, 0)
data$HighSatisfaction <- ifelse(data$JobSatisfaction >= 3, 1, 0)
data$LongCommute <- ifelse(data$DistanceFromHome >= 13, 1, 0)
data$AgeUnder35 <- ifelse(data$Age <=35, 1, 0)
data$DueForPromotion <- ifelse(!data$YearsSinceLastPromotion %in% c(1,5,6,7), 1, 0)
data$HighPerform <- ifelse(data$PerformanceRating >= 3, 1, 0)
data$NoStock <- ifelse(data$StockOptionLevel < 1, 1 , 0)
data$LowTraining <- ifelse(data$TrainingTimesLastYear < 2, 1, 0)
data$HourlyOver40 <- ifelse(data$HourlyRate > 40, 1, 0)
data$MonthlyOver15k <- ifelse(data$MonthlyRate > 15000, 1, 0)
data$LogIncome <- log(data$MonthlyIncome)
# Factor Sub-setting for columns that represent logical baseline reference points from which the model will assume all included
# predictor variables to deviate, and scaling data set for use in modeling
rdata <- subset(data, select = -c(Over18, Department, EducationLevel,
Generations, JobRole, MaritalStatus,
EducationField, EmployeeCount,
StandardHours))
# Scaling data for use in the KNN model
scaled_data <- data.frame(apply(rdata, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X))))
# this  tot_correlation will be used to plot the entire correlation matrix
tot_correlation <- subset(rdata, select = -c(HighPerform))
tot_correlation <- cor(tot_correlation)
# data_corr will be used to view a smaller scale of "core" var.
data_corr <- cor(rdata %>% select(Age, Attrition,MonthlyIncome, DistanceFromHome,
Education, NumCompaniesWorked, EnvironmentSatisfaction,
Gender,HourlyRate, JobSatisfaction, PercentSalaryHike,
OverTime, TotalWorkingYears, WorkLifeBalance,
YearsAtCompany:YearsWithCurrManager))
# this df will be used for analysis of Attrition and Salary data correlatives
crdata <- tot_correlation[,c("Attrition", "MonthlyIncome")]
crdata <- data.frame(rbind(names(crdata), crdata))
crdata <- tibble::rownames_to_column(crdata,"Feature")
# for use with core feats.
#crdata <- data_corr[,c("Attrition", "MonthlyIncome")]
#crdata <- data.frame(rbind(names(crdata), crdata))
#crdata <- tibble::rownames_to_column(crdata,"Feature")
# income correlations
IncomeCorrelation <- crdata %>% select(Feature, MonthlyIncome) %>%
filter(!Feature %in% c("MonthlyIncome", "LogIncome")) %>%
arrange(abs(MonthlyIncome))
# attrition correlations
AttritionCorrelation <- crdata %>% select(Feature, Attrition) %>% arrange(abs(Attrition)) %>% filter(Feature != "Attrition")
AttritionCorrelation$Feature <- as.factor(AttritionCorrelation$Feature)
# Corr Plot with Core Feature Selection
ggcorrplot(corr = data_corr, hc.order = TRUE,insig = 'blank',
colors = c("#6D9EC1", "white", "#E46726")) +
labs(title = "Correlation Between Variables and Attrition",
subtitle = "Netural and Positive Correlation") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
# creating fun to generate the png plots to viz all feats.
cor.mtest <- function(mat, ...) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# matrix of the p-value of the correlation
p.mat <- cor.mtest(tot_correlation)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
# Build corrNums.png
png(height=1200, width=1500, pointsize=8, file="./project2/CorNum.png")
corrplot(tot_correlation, method="color", col=col(200),
type="upper", order="hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.01, insig = "blank", tl.cex = 1.25,
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
ggsave("./project2/CorNum.png", units="in", width=5, height=4, dpi=600)
dev.off()
# Build corrPlot.png
png(height=1200, width=1800, pointsize=15, file="./project2/CorPlot.png")
corrplot(tot_correlation, method="circle", order="hclust",tl.col="black", type="full", tl.cex = 1, p.mat = p.mat, sig.level = 0.01, insig = "blank")
ggsave("./project2/CorPlot.png", units="in", width=5, height=4, dpi=600)
dev.off()
# Build corrMixed.png
png(height=1200, width=1500, pointsize=10, file="./project2/CorMix.png")
corrplot.mixed(round(100*tot_correlation), number.cex = .75, tl.cex = 1, tl.pos = "lt",tl.col="black", is.corr=F)
ggsave("./project2/CorMix.png", units="in", width=5, height=4, dpi=600)
dev.off()
AttritionCorrelation %>% top_n(10) %>% mutate(Feature = factor(Feature, Feature)) %>%
ggplot(aes(Feature, Attrition, fill = Feature)) + geom_col(show.legend = FALSE) +
coord_flip() + labs(title = "Top 10 Correlative Factors for Attrition") +
ylab("Correlation for Feature and Attrition") +
scale_fill_discrete(guide = guide_legend(reverse = TRUE))+
scale_color_fivethirtyeight() +
theme_hc()
IncomeCorrelation %>% top_n(10) %>% mutate(Feature = factor(Feature, Feature)) %>%
ggplot(aes(Feature, MonthlyIncome, fill = Feature)) +
geom_col(show.legend = FALSE) +
labs(title = "Top 10 Correlative Factors for Monthly Income") +
ylab("Correlation for Feature and Monthly Income") + coord_flip() +
scale_color_fivethirtyeight() +
theme_hc()
# Plot for job Correlation based on the 10 ranks
job_corr <- cor(rdata %>% select(Attrition, OverTime, NoStock,
LowLevel, JobSalesRepresentative,LowInvolve,
LessThan4k, FreshHire,Single, NewRole,
AgeUnder35))
# Job_Corr Plot with Core Feature Selection
ggcorrplot(corr = job_corr, hc.order = TRUE,insig = 'blank',lab = TRUE,
lab_size = 2,
colors = c("#6D9EC1", "white", "#E46726")) +
labs(title = "Correlation Between Variables and Attrition",
subtitle = "Netural and Positive Correlation") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
# plot for income corr based on 10 ranks
income_corr <- cor(rdata %>% select(MonthlyIncome, JobLevel,TotalWorkingYears,
JobManager,JobResearchDirector,YearsAtCompany,
Age,GenX,WorkMore30,YearsInCurrentRole,YearsWithCurrManager))
# Corr Plot with Core Feature Selection
ggcorrplot(corr = income_corr, hc.order = TRUE,insig = 'blank',lab = TRUE,
lab_size = 2,
colors = c("#6D9EC1", "white", "#E46726")) +
labs(title = "Correlation Between Variables and Attrition",
subtitle = "Netural and Positive Correlation") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
library(ggcorrplot)
runApp()
rdata <- subset(data1, select = -c(Over18, Department, EducationLevel,
Generations, JobRole, MaritalStatus,
EducationField, EmployeeCount,
StandardHours))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(job_corr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- as.factor(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
